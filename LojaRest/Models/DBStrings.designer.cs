#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.34209
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LojaRest.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StringsBanco")]
	public partial class DBStringsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definições do Método de Extensibilidade
    partial void OnCreated();
    partial void Insertdatabase(database instance);
    partial void Updatedatabase(database instance);
    partial void Deletedatabase(database instance);
    partial void Inserttable(table instance);
    partial void Updatetable(table instance);
    partial void Deletetable(table instance);
    #endregion
		
		public DBStringsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StringsBancoConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBStringsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStringsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStringsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStringsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<database> database
		{
			get
			{
				return this.GetTable<database>();
			}
		}
		
		public System.Data.Linq.Table<table> table
		{
			get
			{
				return this.GetTable<table>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[database]")]
	public partial class database : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _connection;
		
		private EntitySet<table> _table;
		
    #region Definições do Método de Extensibilidade
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnconnectionChanging(string value);
    partial void OnconnectionChanged();
    #endregion
		
		public database()
		{
			this._table = new EntitySet<table>(new Action<table>(this.attach_table), new Action<table>(this.detach_table));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_connection", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string connection
		{
			get
			{
				return this._connection;
			}
			set
			{
				if ((this._connection != value))
				{
					this.OnconnectionChanging(value);
					this.SendPropertyChanging();
					this._connection = value;
					this.SendPropertyChanged("connection");
					this.OnconnectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="database_table", Storage="_table", ThisKey="id", OtherKey="id_database")]
		public EntitySet<table> table
		{
			get
			{
				return this._table;
			}
			set
			{
				this._table.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_table(table entity)
		{
			this.SendPropertyChanging();
			entity.database = this;
		}
		
		private void detach_table(table entity)
		{
			this.SendPropertyChanging();
			entity.database = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[table]")]
	public partial class table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_database;
		
		private string _create_string;
		
		private string _drop_string;
		
		private string _insert_string;
		
		private string _select_string;
		
		private string _name;
		
		private int _priority;
		
		private EntityRef<database> _database;
		
    #region Definições do Método de Extensibilidade
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_databaseChanging(int value);
    partial void Onid_databaseChanged();
    partial void Oncreate_stringChanging(string value);
    partial void Oncreate_stringChanged();
    partial void Ondrop_stringChanging(string value);
    partial void Ondrop_stringChanged();
    partial void Oninsert_stringChanging(string value);
    partial void Oninsert_stringChanged();
    partial void Onselect_stringChanging(string value);
    partial void Onselect_stringChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public table()
		{
			this._database = default(EntityRef<database>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_database", DbType="Int NOT NULL")]
		public int id_database
		{
			get
			{
				return this._id_database;
			}
			set
			{
				if ((this._id_database != value))
				{
					if (this._database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_databaseChanging(value);
					this.SendPropertyChanging();
					this._id_database = value;
					this.SendPropertyChanged("id_database");
					this.Onid_databaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_create_string", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string create_string
		{
			get
			{
				return this._create_string;
			}
			set
			{
				if ((this._create_string != value))
				{
					this.Oncreate_stringChanging(value);
					this.SendPropertyChanging();
					this._create_string = value;
					this.SendPropertyChanged("create_string");
					this.Oncreate_stringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drop_string", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string drop_string
		{
			get
			{
				return this._drop_string;
			}
			set
			{
				if ((this._drop_string != value))
				{
					this.Ondrop_stringChanging(value);
					this.SendPropertyChanging();
					this._drop_string = value;
					this.SendPropertyChanged("drop_string");
					this.Ondrop_stringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_insert_string", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string insert_string
		{
			get
			{
				return this._insert_string;
			}
			set
			{
				if ((this._insert_string != value))
				{
					this.Oninsert_stringChanging(value);
					this.SendPropertyChanging();
					this._insert_string = value;
					this.SendPropertyChanged("insert_string");
					this.Oninsert_stringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_select_string", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string select_string
		{
			get
			{
				return this._select_string;
			}
			set
			{
				if ((this._select_string != value))
				{
					this.Onselect_stringChanging(value);
					this.SendPropertyChanging();
					this._select_string = value;
					this.SendPropertyChanged("select_string");
					this.Onselect_stringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="database_table", Storage="_database", ThisKey="id_database", OtherKey="id", IsForeignKey=true)]
		public database database
		{
			get
			{
				return this._database.Entity;
			}
			set
			{
				database previousValue = this._database.Entity;
				if (((previousValue != value) 
							|| (this._database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._database.Entity = null;
						previousValue.table.Remove(this);
					}
					this._database.Entity = value;
					if ((value != null))
					{
						value.table.Add(this);
						this._id_database = value.id;
					}
					else
					{
						this._id_database = default(int);
					}
					this.SendPropertyChanged("database");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
