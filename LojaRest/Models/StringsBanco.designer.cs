#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.34209
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LojaRest.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StringsBanco")]
	public partial class StringsBancoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definições do Método de Extensibilidade
    partial void OnCreated();
    partial void Insertcreate_table(create_table instance);
    partial void Updatecreate_table(create_table instance);
    partial void Deletecreate_table(create_table instance);
    partial void Insertinsert_table(insert_table instance);
    partial void Updateinsert_table(insert_table instance);
    partial void Deleteinsert_table(insert_table instance);
    partial void Insertdatabases(databases instance);
    partial void Updatedatabases(databases instance);
    partial void Deletedatabases(databases instance);
    #endregion
		
		public StringsBancoDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StringsBancoConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StringsBancoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StringsBancoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StringsBancoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StringsBancoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<create_table> create_table
		{
			get
			{
				return this.GetTable<create_table>();
			}
		}
		
		public System.Data.Linq.Table<insert_table> insert_table
		{
			get
			{
				return this.GetTable<insert_table>();
			}
		}
		
		public System.Data.Linq.Table<databases> databases
		{
			get
			{
				return this.GetTable<databases>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.create_table")]
	public partial class create_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_database;
		
		private string _string;
		
		private int _priority;
		
		private EntityRef<insert_table> _insert_table;
		
		private EntityRef<databases> _databases;
		
    #region Definições do Método de Extensibilidade
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_databaseChanging(int value);
    partial void Onid_databaseChanged();
    partial void OnstringChanging(string value);
    partial void OnstringChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public create_table()
		{
			this._insert_table = default(EntityRef<insert_table>);
			this._databases = default(EntityRef<databases>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_database", DbType="Int NOT NULL")]
		public int id_database
		{
			get
			{
				return this._id_database;
			}
			set
			{
				if ((this._id_database != value))
				{
					if (this._databases.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_databaseChanging(value);
					this.SendPropertyChanging();
					this._id_database = value;
					this.SendPropertyChanged("id_database");
					this.Onid_databaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="string", Storage="_string", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string @string
		{
			get
			{
				return this._string;
			}
			set
			{
				if ((this._string != value))
				{
					this.OnstringChanging(value);
					this.SendPropertyChanging();
					this._string = value;
					this.SendPropertyChanged("@string");
					this.OnstringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="create_table_insert_table", Storage="_insert_table", ThisKey="id", OtherKey="id_create_table", IsUnique=true, IsForeignKey=false)]
		public insert_table insert_table
		{
			get
			{
				return this._insert_table.Entity;
			}
			set
			{
				insert_table previousValue = this._insert_table.Entity;
				if (((previousValue != value) 
							|| (this._insert_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._insert_table.Entity = null;
						previousValue.create_table = null;
					}
					this._insert_table.Entity = value;
					if ((value != null))
					{
						value.create_table = this;
					}
					this.SendPropertyChanged("insert_table");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="databases_create_table", Storage="_databases", ThisKey="id_database", OtherKey="id", IsForeignKey=true)]
		public databases databases
		{
			get
			{
				return this._databases.Entity;
			}
			set
			{
				databases previousValue = this._databases.Entity;
				if (((previousValue != value) 
							|| (this._databases.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._databases.Entity = null;
						previousValue.create_table.Remove(this);
					}
					this._databases.Entity = value;
					if ((value != null))
					{
						value.create_table.Add(this);
						this._id_database = value.id;
					}
					else
					{
						this._id_database = default(int);
					}
					this.SendPropertyChanged("databases");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.insert_table")]
	public partial class insert_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_create_table;
		
		private string _string;
		
		private EntityRef<create_table> _create_table;
		
    #region Definições do Método de Extensibilidade
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_create_tableChanging(int value);
    partial void Onid_create_tableChanged();
    partial void OnstringChanging(string value);
    partial void OnstringChanged();
    #endregion
		
		public insert_table()
		{
			this._create_table = default(EntityRef<create_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_create_table", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_create_table
		{
			get
			{
				return this._id_create_table;
			}
			set
			{
				if ((this._id_create_table != value))
				{
					if (this._create_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_create_tableChanging(value);
					this.SendPropertyChanging();
					this._id_create_table = value;
					this.SendPropertyChanged("id_create_table");
					this.Onid_create_tableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="string", Storage="_string", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string @string
		{
			get
			{
				return this._string;
			}
			set
			{
				if ((this._string != value))
				{
					this.OnstringChanging(value);
					this.SendPropertyChanging();
					this._string = value;
					this.SendPropertyChanged("@string");
					this.OnstringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="create_table_insert_table", Storage="_create_table", ThisKey="id_create_table", OtherKey="id", IsForeignKey=true)]
		public create_table create_table
		{
			get
			{
				return this._create_table.Entity;
			}
			set
			{
				create_table previousValue = this._create_table.Entity;
				if (((previousValue != value) 
							|| (this._create_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._create_table.Entity = null;
						previousValue.insert_table = null;
					}
					this._create_table.Entity = value;
					if ((value != null))
					{
						value.insert_table = this;
						this._id_create_table = value.id;
					}
					else
					{
						this._id_create_table = default(int);
					}
					this.SendPropertyChanged("create_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.databases")]
	public partial class databases : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<create_table> _create_table;
		
    #region Definições do Método de Extensibilidade
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public databases()
		{
			this._create_table = new EntitySet<create_table>(new Action<create_table>(this.attach_create_table), new Action<create_table>(this.detach_create_table));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="databases_create_table", Storage="_create_table", ThisKey="id", OtherKey="id_database")]
		public EntitySet<create_table> create_table
		{
			get
			{
				return this._create_table;
			}
			set
			{
				this._create_table.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_create_table(create_table entity)
		{
			this.SendPropertyChanging();
			entity.databases = this;
		}
		
		private void detach_create_table(create_table entity)
		{
			this.SendPropertyChanging();
			entity.databases = null;
		}
	}
}
#pragma warning restore 1591
